# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ImageRegistration
                                 A QGIS plugin
 This plugin performs Image Registration
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Chris
        email                : chris@augsignals.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import subprocess
import os

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QWidget, QMenu
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsMapLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .image_registration_dialog import ImageRegistrationDialog
import os.path

class ImageRegistration:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ImageRegistration_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Image Registration')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ImageRegistration', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def addToCustomMenu(self):
        self.menu = self.iface.mainWindow().findChild(QMenu, '&Image Registration')
        if not self.menu:
            self.menu = QMenu(self.iface.mainWindow())
            self.menu.setObjectName('&Image Registration')
            self.menu.setTitle('&Image Registration')
        self.action = QAction(QIcon(":/plugins/lee_sigma_filter/icon.png"),
                                    "Image Registration",
                                    self.iface.mainWindow())
        self.action.setObjectName("testAction")
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is the Image Registration config setup")
        self.action.triggered.connect(self.run)

        self.menu.addAction(self.action)

        menuBar = self.iface.mainWindow().menuBar()
        menuBar.insertMenu(self.iface.firstRightStandardMenu().menuAction(),
                       self.menu)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.addToCustomMenu()

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Image Registration'),
                action)
            self.iface.removeToolBarIcon(action)

    def pageChange(self, pagesToChange):
        curIndex = self.dlg.stackedWidget.currentIndex()
        curIndex += pagesToChange
        if curIndex < 0:
            curIndex = 0
        if curIndex >= self.dlg.stackedWidget.count():
            curIndex = self.dlg.stackedWidget.count() - 1
        self.dlg.stackedWidget.setCurrentIndex(curIndex)

    def scalingAdd(self):
        scalingPair = (self.dlg.scalingLowerValueDoubleSpinBox.value(), self.dlg.scalingUpperValueDoubleSpinBox.value())
        self.scalingPairs.append(scalingPair)
        self.dlg.scalingList.addItem('Lower: ' + str(scalingPair[0]) + ', ' + 'Upper: ' + str(scalingPair[1]))

    def scalingDelete(self):
        selectedIndex = self.dlg.scalingList.currentRow()
        if selectedIndex >= 0:
            self.dlg.scalingList.takeItem(selectedIndex)
            del self.scalingPairs[selectedIndex]

    def featureImageAdd(self):
        featureImagePair = (self.dlg.featureReferenceImageQgsFileWidget.filePath(), self.dlg.featureWarpImageQgsFileWidget.filePath())
        self.featureImagePairs.append(featureImagePair)
        self.dlg.featureImageList.addItem('Reference: ' + str(featureImagePair[0]) + ', ' + 'Warp: ' + str(featureImagePair[1]))

    def featureImageDelete(self):
        selectedIndex = self.dlg.featureImageList.currentRow()
        if selectedIndex >= 0:
            self.dlg.featureImageList.takeItem(selectedIndex)
            del self.featureImagePairs[selectedIndex]

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ImageRegistrationDialog()
            self.dlg.previousButton.clicked.connect(lambda: self.pageChange(-1))
            self.dlg.nextButton.clicked.connect(lambda: self.pageChange(1))
            self.dlg.scalingAddButton.clicked.connect(self.scalingAdd)
            self.dlg.scalingDeleteButton.clicked.connect(self.scalingDelete)
            self.dlg.featureImageAddButton.clicked.connect(self.featureImageAdd)
            self.dlg.featureImageDeleteButton.clicked.connect(self.featureImageDelete)

        # Start the widget on the first page
        self.dlg.stackedWidget.setCurrentIndex(0)
        self.scalingPairs = []
        self.featureImagePairs = []
        self.dlg.scalingList.clear()
        self.dlg.featureImageList.clear()

        self.arguments = {}

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.arguments['-t'] = str(self.dlg.transformationTypeComboBox.currentIndex())
            self.arguments['-b'] = str(self.dlg.bandSpinBox.text())
            self.arguments['-d'] = self.dlg.downsampleInputImageCheckBox.isChecked()
            self.arguments['-k'] = str(self.dlg.windowSizeSpinBox.text())
            self.arguments['-r'] = str(self.dlg.interpolationMethodComboBox.currentIndex())
            self.arguments['-m'] = str(self.dlg.searchMethodComboBox.currentIndex())
            self.arguments['-n'] = str(self.dlg.similarityMetricsComboBox.currentIndex())
            self.arguments['-p'] = str(self.dlg.borderPaddingValueDoubleSpinBox.text())
            self.arguments['-c'] = str(self.dlg.scaleIncrementValueQDoubleSpinBox.text())
            self.arguments['-a'] = str(self.dlg.rotationIncrementValueDoubleSpinBox.text())
            self.arguments['-rf'] = str(self.dlg.lowerRotationFactorBoundDoubleSpinBox.text()) + ',' + str(self.dlg.upperRotationFactorBoundDoubleSpinBox.text())
            logFilePath = self.dlg.logFileQgsFileWidget.filePath()
            backslashPos = logFilePath.rfind('\\')
            self.arguments['-l'] = logFilePath[:backslashPos] + ',' + logFilePath[backslashPos + 1:]
            self.arguments['-i'] = self.dlg.originalReferenceImageQgsFileWidget.filePath() + ',' + self.dlg.originalWarpImageQgsFileWidget.filePath()

            outputFiles = self.dlg.outputDirectoryQgsFileWidget.filePath() + '\\'
            outputFiles += ',' + self.dlg.referenceUnionLineEdit.text()
            outputFiles += ',' + self.dlg.warpUnionLineEdit.text()
            outputFiles += ',' + self.dlg.warpIntersectLineEdit.text()
            outputFiles += ',' + self.dlg.trasformationMatrixLineEdit.text()
            outputFiles += ',' + self.dlg.finalControlPointsLineEdit.text()
            self.arguments['-o'] = outputFiles

            args = []
            for key, value in self.arguments.items():
                if(value == False):
                    continue
                if (value == True):
                    args.append(key)
                else:
                    args.append(key)
                    args.append(value)
            
            for scaling in self.scalingPairs:
                args.append('-s')
                args.append(str(scaling[0]) + ',' + str(scaling[1]))

            for featureImage in self.featureImagePairs:
                args.append('-f')
                args.append(str(featureImage[0]) + ',' + str(featureImage[1]))

            print(args)

            s = QSettings()
            path = s.value("qgis-exe/path")
            exeName = "Registration.exe"
            path = path + "/" + exeName
            args.insert(0, path)
            
            QgsMessageLog.logMessage("Your plugin has been executed correctly", 'MyPlugin', Qgis.Info)
            QgsMessageLog.logMessage(str(args), 'MyPlugin', Qgis.Info)
            popen = subprocess.Popen(args)
            popen.wait()
