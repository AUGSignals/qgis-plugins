# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RangeDopplerTerrainCorrection
                                 A QGIS plugin
 This plugin performs a Range Doppler Terrain Correction
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-17
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Tomas/AUG Signals
        email                : tomas@augsignals
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import subprocess
import os

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMenu, QFileDialog
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsMapLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .range_doppler_dialog import RangeDopplerTerrainCorrectionDialog
from .output_dialog import OutputDialog
import os.path


class RangeDopplerTerrainCorrection:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.output_dialog = OutputDialog()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RangeDopplerTerrainCorrection_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Range Doppler Terrain Correction')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RangeDopplerTerrainCorrection', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.addToCustomMenu()

        # icon_path = ':/plugins/range_doppler/icon.png'
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u''),
        #     callback=self.run,
        #     parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def addToCustomMenu(self):
        self.menu = self.iface.mainWindow().findChild(QMenu, '&Image Registration')
        if not self.menu:
            self.menu = QMenu(self.iface.mainWindow())
            self.menu.setObjectName('&Image Registration')
            self.menu.setTitle('&Image Registration')
        self.action = QAction(QIcon(":/plugins/lee_sigma_filter/icon.png"),
                                    "Range Doppler",
                                    self.iface.mainWindow())
        self.action.setObjectName("Range Doppler")
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is status tip")
        self.action.triggered.connect(self.run)

        self.menu.addAction(self.action)

        menuBar = self.iface.mainWindow().menuBar()
        menuBar.insertMenu(self.iface.firstRightStandardMenu().menuAction(),
                       self.menu)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        #self.addToCustomMenu()        
        # for action in self.actions:
        #     self.iface.removePluginMenu(
        #         self.tr(u'&Range Doppler Terrain Correction'),
        #         action)
        #     self.iface.removeToolBarIcon(action)


    def openOutputPath(self):
        layer_paths = [layer.source() for layer in QgsProject.instance().mapLayers().values()]
        directory_path = os.path.dirname(layer_paths[0])
        filepath = QFileDialog.getSaveFileName(self.dlg, "Select output file", directory_path, ".img")
        self.dlg.le_output.setText(filepath[0] + filepath[1])

    def display_bands(self):
        curr_layer = self.dlg.mcb_input.currentLayer()
        if curr_layer.type() == QgsMapLayer.RasterLayer:
            self.dlg.rcb_band.setEnabled(True)
            self.dlg.rcb_band.setLayer(curr_layer)
            size = "{:.1f}(m) x {:.1f}(m)".format(self.dlg.mcb_input.currentLayer().width(), self.dlg.mcb_input.currentLayer().height())
            self.dlg.la_spacing.setText(size)
        else:
            self.dlg.rcb_band.setDisabled(True)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RangeDopplerTerrainCorrectionDialog()
            self.dlg.pb_output.clicked.connect(self.openOutputPath)
            self.dlg.mcb_input.layerChanged.connect(self.display_bands)
            self.dlg.rcb_band.setLayer(self.dlg.mcb_input.currentLayer())
            if self.dlg.mcb_input.currentLayer():
                size = "{:.1f}(m) x {:.1f}(m)".format(self.dlg.mcb_input.currentLayer().width(), self.dlg.mcb_input.currentLayer().height())
                self.dlg.la_spacing.setText(size)

        #Set up all options

        #layers = QgsProject.instance().layerTreeRoot().children()
        #self.dlg.mcb_input.clear()
        #self.dlg.mcb_input.addItems([layer.name() for layer in layers])

        self.dlg.le_output.clear()

        digital_elevation_models = ["SRTM 3Sec (Auto Download)"]
        self.dlg.cb_elevation.clear()
        self.dlg.cb_elevation.addItems(digital_elevation_models)

        dem_resampling_methods = ["BILINEAR_INTERPOLATION"]
        self.dlg.cb_dem.clear()
        self.dlg.cb_dem.addItems(dem_resampling_methods)

        img_resampling_methods = ["BILINEAR_INTERPOLATION"]
        self.dlg.cb_resampling.clear()
        self.dlg.cb_resampling.addItems(img_resampling_methods)

        self.dlg.le_projection.setText("WGS84") #TODO - can also be set from img





        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.arguments['-i'] = self.dlg.inputQgsFileWidget.filePath()
            self.arguments["-o"] = self.dlg.outputQgsFileWidget.filePath()
            self.arguments["-b"] = self.dlg.bandQgsFileWidget.filePath()
            self.arguments["-d"] = self.dlg.demQgsFileWidget.filePath()
            self.arguments["-g"] = self.dlg.egmQgsFileWidget.filePath()
            
            args = []
            
            for key, value in self.arguments.items():
                if(value == False):
                    continue
                if (value == True):
                    args.append(key)
                else:
                    args.append(key)
                    args.append(value)
            args.append('/k')
            
            #args.insert(0, "path", "%PATH%;C:\OpenCV\OpenCV-4.2\\bin")
            
            s = QSettings()
            path = s.value("qgis-exe/path")
            exeName = "SAR-RDTC.exe"
            path = path + "/" + exeName
            args.insert(0, path)
            args_message = " ".join(arg for arg in args)

            popen = subprocess.Popen(args, stdout=subprocess.PIPE)
            popen.wait()
            out, err = popen.communicate()
            output_dialog_text = ""
            if out is not None:
                output_dialog_text += out.decode('utf-8')
                #for line in str(out.decode('utf-8')).splitlines():
                #    output_dialog_text += line
            if err is not None:
                output_dialog_text += err.decode('utf-8')
        
            QgsMessageLog.logMessage("Your plugin code has been executed correctly", 'MyPlugin', Qgis.Info)
            QgsMessageLog.logMessage(str(args), 'MyPlugin', Qgis.Info)
            print("output is", out, err)
            QgsMessageLog.logMessage(str(out), 'MyPlugin', Qgis.Info)
            QgsMessageLog.logMessage(str(err), 'MyPlugin', Qgis.Info)
            self.output_dialog.commandText.setText(args_message)
            self.output_dialog.outputText.setText(output_dialog_text)
            output_dialog = self.output_dialog.exec_()
